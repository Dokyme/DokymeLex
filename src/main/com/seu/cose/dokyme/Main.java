package com.seu.cose.dokyme;

import org.apache.commons.cli.*;

import java.util.Set;

public class Main {

    private static String generatedFilePath;
    private static String lexFilePath;
    public static String packageInfo;

    public static boolean debug;

    public static void initCmdParser(String[] args) {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();
        try {
            options.addOption("h", "help", false, "Print the help information.");
            options.addOption("v", "version", false, "Print the version information.");
            options.addOption("l", "lex", true, "The path to lex file.");
            options.addOption("o", "output", true, "The path to generate new parser source .java file.");
            options.addOption("d", "debug", false, "Print debug output.");
            options.addOption("p", "package", true, "Specified the generated source file package name.Default:defualt");
            CommandLine cmd = parser.parse(options, args);
            if (cmd.hasOption("h")) {
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("Options", options);
                System.exit(0);
            } else if (cmd.hasOption("v")) {
                System.out.println("DokymeLex parser generator from Southeast University Software Academy.\nVersion:1.0.0.\n2017-12-20");
                System.exit(0);
            }
            if (cmd.hasOption("l")) {
                lexFilePath = cmd.getOptionValue("l");
            } else {
                System.out.println("Error:Lex file path required!");
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("Options", options);
                System.exit(0);
            }
            if (cmd.hasOption("o")) {
                generatedFilePath = cmd.getOptionValue("o");
            } else {
                generatedFilePath = "DokymeLexer.java";
            }
            if (cmd.hasOption("p")) {
                packageInfo = cmd.getOptionValue("p");
            } else {
                packageInfo = "com";
            }
            debug = cmd.hasOption("d");
        } catch (ParseException e) {
            System.out.println("Error:Unpected option.Try -h for usage help.");
            System.out.println(options.getOptions());
            System.exit(0);
        }
    }

    public static void main(String[] args) {
        initCmdParser(args);
        System.out.println("Generating is started.Please waiting patiently......\nThe consuming time is related to the complexity of your given lex file.");
        System.out.println("When waiting...An introduction to lex:");
        System.out.println("Lex helps write programs whose control flow is directed by instances of regular expressions in the input stream. It is well suited for editor-script type transformations and for segmenting input in preparation for a parsing routine.");
        System.out.println("Lex source is a table of regular expressions and corresponding program fragments. The table is translated to a program which reads an input stream, copying it to an output stream and partitioning the input into strings which match the given expressions. As each such string is recognized the corresponding program fragment is executed. The recognition of the expressions is performed by a deterministic finite automaton generated by Lex. The program fragments written by the user are executed in the order in which the corresponding regular expressions occur in the input stream.");
        System.out.println("The lexical analysis programs written with Lex accept ambiguous specifications and choose the longest match possible at each input point. If necessary, substantial lookahead is performed on the input, but the input stream will be backed up to the end of the current partition, so that the user has general freedom to manipulate it.");
        System.out.println("Lex can generate analyzers in either C or Ratfor, a language which can be translated automatically to portable Fortran. It is available on the PDP-11 UNIX, Honeywell GCOS, and IBM OS systems. This manual, however, will only discuss generating analyzers in C on the UNIX system, which is the only supported form of Lex under UNIX Version 7. Lex is designed to simplify interfacing with Yacc, for those with access to this compiler-compiler system.");
        FileReader dokymeFile = new FileReader(lexFilePath);
        FileWriter generate = new FileWriter(generatedFilePath);
        DokymeLexFile lexFile = new DokymeLexFile(dokymeFile);
        Set<NoDefiniteAutomation> nfas = lexFile.parseDokymeFile().buildNFAs();
        DefiniteAutomation dfa = DefiniteAutomation.build(nfas);
        SourceGenerator sg = new SourceGenerator(generate, dfa, lexFile);
        sg.dokymeFile();
        System.out.println("Generating success!Now please refer to the generated source file.Compile it with 'javac' and run it using 'java'\nNotice:You may need to modified package info in that file in consistent with directory structure.");
    }
}
